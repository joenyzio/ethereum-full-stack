{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["greeterAddress","tokenAddress","App","useState","greeting","setGreetingValue","userAccount","setUserAccount","amount","setAmount","requestAccount","a","window","ethereum","request","method","fetchGreeting","provider","ethers","providers","Web3Provider","console","log","contract","Contract","Greeter","abi","greet","data","account","Token","balanceOf","balance","toString","signer","getSigner","setGreeting","transaction","wait","transfer","className","onClick","onChange","e","target","value","placeholder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f2257035.chunk.js","sourcesContent":["import './App.css';\nimport { useState } from 'react';\nimport { ethers } from 'ethers'\nimport Greeter from './artifacts/contracts/Greeter.sol/Greeter.json'\nimport Token from './artifacts/contracts/Token.sol/Token.json'\n\nconst greeterAddress = \"0x3598353C70a36Ca1224A9D9b7d35Bff577977dD6\"\nconst tokenAddress = \"0x187599032D5b74Fd3275E2884587b4281c16B396\"\n\nfunction App() {\n  const [greeting, setGreetingValue] = useState()\n  const [userAccount, setUserAccount] = useState()\n  const [amount, setAmount] = useState()\n\n  async function requestAccount() {\n    await window.ethereum.request({ method: 'eth_requestAccounts' });\n  }\n\n  async function fetchGreeting() {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum)\n      console.log({ provider })\n      const contract = new ethers.Contract(greeterAddress, Greeter.abi, provider)\n      try {\n        const data = await contract.greet()\n        console.log('data: ', data)\n      } catch (err) {\n        console.log(\"Error: \", err)\n      }\n    }    \n  }\n\n  async function getBalance() {\n    if (typeof window.ethereum !== 'undefined') {\n      const [account] = await window.ethereum.request({ method: 'eth_requestAccounts' })\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const contract = new ethers.Contract(tokenAddress, Token.abi, provider)\n      const balance = await contract.balanceOf(account);\n      console.log(\"Balance: \", balance.toString());\n    }\n  }\n\n  async function setGreeting() {\n    if (!greeting) return\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount()\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      console.log({ provider })\n      const signer = provider.getSigner()\n      const contract = new ethers.Contract(greeterAddress, Greeter.abi, signer)\n      const transaction = await contract.setGreeting(greeting)\n      await transaction.wait()\n      fetchGreeting()\n    }\n  }\n\n  async function sendCoins() {\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount()\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(tokenAddress, Token.abi, signer);\n      const transaction = await contract.transfer(userAccount, amount);\n      await transaction.wait();\n      console.log(`${amount} Coins successfully sent to ${userAccount}`);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <button onClick={fetchGreeting}>Fetch Greeting</button>\n        <button onClick={setGreeting}>Set Greeting</button>\n        <input onChange={e => setGreetingValue(e.target.value)} placeholder=\"Set greeting\" />\n\n        <br />\n        <button onClick={getBalance}>Get Balance</button>\n        <button onClick={sendCoins}>Send Coins</button>\n        <input onChange={e => setUserAccount(e.target.value)} placeholder=\"Account ID\" />\n        <input onChange={e => setAmount(e.target.value)} placeholder=\"Amount\" />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}